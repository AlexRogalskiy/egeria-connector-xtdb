# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: {{ .Release.Name }}-init-and-report
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: init-and-report

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myapp.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: init-and-report
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: {{ include "myapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: init-and-report
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Release.Name }}-cts
      # Wait for all of the services to be up before attempting initial configuration
      initContainers:
          - name: wait-for-proxy
            image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
            imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
            env:
              - name: SERVICE
                value: {{ .Release.Name }}-xtdb-service
          - name: wait-for-kafka
            image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
            imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
            env:
              - name: SERVICE
                value: {{ .Release.Name }}-kafka
      # Then configure and startup the CTS, and eventually produce the reports
      containers:
        - name: init-and-report
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          command:
            - "/bin/bash"
            - "-c"
            - >
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/server-url-root?url=${XTDBPROXY_ENDPOINT}
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/server-type?typeName=Conformance
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/event-bus?topicURLRoot=egeria
                --data '{"producer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"}, "consumer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"} }'
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/cohorts/${EGERIA_COHORT}
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/conformance-suite-workbenches/repository-workbench/repositories
                --data '{"class":"RepositoryConformanceWorkbenchConfig","tutRepositoryServerName":"'"${XTDB_SERVER}"'","maxSearchResults":{{ .Values.records }} }'
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/instance
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/server-type?typeName=XTDB
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/organization-name?name=ODPi
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/event-bus?topicURLRoot=egeria
                --data '{"producer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"}, "consumer": {"bootstrap.servers": "'"${KAFKA_ENDPOINT}"'"} }'
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/local-repository/mode/plugin-repository/connection
                --data '{"class":"Connection","connectorType":{"class":"ConnectorType","connectorProviderClassName":"org.odpi.egeria.connectors.juxt.xtdb.repositoryconnector.XtdbOMRSRepositoryConnectorProvider"},"configurationProperties":{"xtdbConfig":{"xtdb/index-store":{"kv-store":{"xtdb/module":"xtdb.lmdb/->kv-store","db-dir":"data/servers/xtdb/lmdb-index"}},"xtdb/document-store":{"kv-store":{"xtdb/module":"xtdb.rocksdb/->kv-store","db-dir":"data/servers/xtdb/rdb-docs"}},"xtdb/tx-log":{"kv-store":{"xtdb/module":"xtdb.rocksdb/->kv-store","db-dir":"data/servers/xtdb/rdb-tx"}},"xtdb.lucene/lucene-store":{"db-dir":"data/servers/xtdb/lucene"}}}}'
                &&
                curl -f -k --verbose --basic admin:admin -X POST
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/cohorts/${EGERIA_COHORT}
                &&
                curl -f -k --verbose --basic admin:admin -X POST --max-time 900
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/instance
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/cts/configuration > /tmp/omag.server.cts.config
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${XTDB_SERVER}/configuration > /tmp/omag.server.${XTDB_SERVER}.config
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/repository-services/users/${EGERIA_USER}/metadata-highway/local-registration > /tmp/cohort.${EGERIA_COHORT}.cts.local
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/repository-services/users/${EGERIA_USER}/metadata-highway/cohorts/${EGERIA_COHORT}/remote-members > /tmp/cohort.${EGERIA_COHORT}.cts.remote
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/servers/${XTDB_SERVER}/open-metadata/repository-services/users/${EGERIA_USER}/metadata-highway/local-registration > /tmp/cohort.${EGERIA_COHORT}.${XTDB_SERVER}.local
                &&
                curl -f -k --verbose --basic admin:admin -X GET
                ${XTDBPROXY_ENDPOINT}/servers/${XTDB_SERVER}/open-metadata/repository-services/users/${EGERIA_USER}/metadata-highway/cohorts/${EGERIA_COHORT}/remote-members > /tmp/cohort.${EGERIA_COHORT}.${XTDB_SERVER}.remote
                &&
                echo ""; echo "Waiting 2 minutes for CTS to start..."; sleep 120
                &&
                until [ $(curl -f -k --silent --basic admin:admin -X GET ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/status/workbenches/repository-workbench | jq '.workbenchStatus.workbenchComplete') == "true" ]; do
                echo "... waiting for CTS to complete";
                sleep 20;
                done
                &&
                curl -f -k --silent --basic admin:admin -X GET --max-time 60 ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/report/summary > /tmp/openmetadata_cts_summary.json
                &&
                TEST_CASES=$(curl -f -k --silent --basic admin:admin -X GET --max-time 60 ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/report/test-cases  | jq -r '.testCaseIds[]')
                &&
                PROFILES=$(curl -f -k --silent --basic admin:admin -X GET --max-time 60 ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/report/profiles | jq -r '.profileNames[]')
                &&
                mkdir -p /tmp/profile-details
                &&
                while read -r line; do
                urlencoded=$(echo ${line} | sed -e 's/ /%20/g');
                filename=$(echo ${line} | sed -e 's/ /_/g');
                echo "Retrieving profile details for: ${line}";
                curl -f -k --silent --basic admin:admin -X GET --max-time 60 ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/report/profiles/${urlencoded} > /tmp/profile-details/${filename}.json;
                done < <(echo "${PROFILES}")
                &&
                mkdir -p /tmp/test-case-details
                &&
                while read -r line; do
                urlencoded=$(echo ${line} | sed -e 's/</%3C/g');
                urlencoded=$(echo ${urlencoded} | sed -e 's/>/%3E/g');
                filename=$(echo ${line} | sed -e 's/[<>]/_/g');
                echo "Retrieving test case details for: ${line}";
                curl -f -k --silent --basic admin:admin -X GET --max-time 60 ${XTDBPROXY_ENDPOINT}/servers/cts/open-metadata/conformance-suite/users/${EGERIA_USER}/report/test-cases/${urlencoded} > /tmp/test-case-details/${filename}.json;
                done < <(echo "${TEST_CASES}")
                &&
                cd /tmp
                &&
                tar cvf pd.tar profile-details/*.json; gzip pd.tar
                &&
                tar cvf tcd.tar test-case-details/*.json; gzip tcd.tar
                &&
                tar cvf ${CTS_REPORT_NAME}.tar *.config cohort.* openmetadata_cts_summary.json pd.tar.gz tcd.tar.gz; gzip ${CTS_REPORT_NAME}.tar
                &&
                echo "Complete -- CTS results available to download from /tmp/${CTS_REPORT_NAME}.tar.gz"
                &&
                tail -f /dev/null
          resources:
            requests:
              memory: "16Mi"
              cpu: "100m"
            limits:
              memory: "64Mi"
              cpu: "500m"

status: {}
...

# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-init-and-report
  labels:
    app.kubernetes.io/component: init-and-report
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: init-and-report
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: init-and-report
    spec:
      serviceAccountName: {{ .Release.Name }}-ha
      volumes:
        - name: scripts-volume
          emptyDir: {}
      # Wait for all of the services to be up before attempting initial configuration
      initContainers:
        - name: download-scripts
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                {{ .Values.image.configure.name }}\
                :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          command:
            - "/bin/bash"
            - "-c"
            - >
                cd /opt/egeria/scripts &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/waitForStatefulSet.sh --output waitForStatefulSet.sh &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/bootstrapConfig.sh --output bootstrapConfig.sh &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/consolidateResults.sh --output consolidateResults.sh &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/recordEnv.sh --output recordEnv.sh &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/startPTS.sh --output startPTS.sh &&
                curl --location https://github.com/cmgrote/egeria-connector-crux/raw/main/cts/charts/ec-ha-crux/bin/waitLoop.sh --output waitLoop.sh &&
                chmod 755 *.sh
          volumeMounts:
            - mountPath: /opt/egeria/scripts
              name: scripts-volume
        - name: wait-for-kafka
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                {{ .Values.image.configure.name }}\
                :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-kafka
        - name: wait-for-pts
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                {{ .Values.image.configure.name }}\
                :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-pts
        - name: wait-for-proxy
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                {{ .Values.image.configure.name }}\
                :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-crux
      # Then configure and startup the PTS, and eventually produce the reports
      containers:
        - name: init-and-report
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.namespace | default .Values.imageDefaults.namespace) }}{{ .Values.image.configure.namespace | default .Values.imageDefaults.namespace }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
            - secretRef:
                name: {{ .Values.jdbcDetails.secret }}
          command:
            - "/bin/bash"
            - "-c"
            - >
                cd /opt/egeria/scripts &&
                ./waitForStatefulSet.sh &&
                ./bootstrapConfig.sh &&
                ./startPTS.sh &&
                ./recordEnv.sh &&
                ./waitLoop.sh &&
                ./consolidateResults.sh &&
                tail -f /dev/null
          volumeMounts:
            - mountPath: /opt/egeria/scripts
              name: scripts-volume
              readOnly: true
          resources:
            requests:
              memory: "16Mi"
              cpu: "100m"
            limits:
              memory: "64Mi"
              cpu: "500m"

status: {}
...
